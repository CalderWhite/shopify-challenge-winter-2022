{
	"info": {
		"_postman_id": "2c376778-6028-406e-a4da-0b073a182b04",
		"name": "Admin Actions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Faulty Request Tests",
			"item": [
				{
					"name": "Unauthorized token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var schema = {",
									"  \"message\": {",
									"    \"type\": \"string\"",
									"  }",
									"};",
									"",
									"pm.test(\"Body matches schema\", function () {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Message error message is correct\", function() {",
									"    pm.expect(pm.response.json().message).to.eql(\"Authentication token does not have admin access.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "this is the wrong token",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/calder",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"calder"
							]
						}
					},
					"response": []
				},
				{
					"name": "No token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"var schema = {",
									"  \"message\": {",
									"    \"type\": \"string\"",
									"  }",
									"};",
									"",
									"pm.test(\"Body matches schema\", function () {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Message error message is correct\", function() {",
									"    pm.expect(pm.response.json().message).to.eql(\"No authentication token supplied!\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/calder",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"calder"
							]
						}
					},
					"response": []
				},
				{
					"name": "User already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"var schema = {",
									"  \"message\": {",
									"    \"type\": \"string\"",
									"  }",
									"};",
									"",
									"pm.test(\"Body matches schema\", function () {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Message error message is correct\", function() {",
									"    pm.expect(pm.response.json().message).to.eql(\"User [calder] already exists!\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let API_URL = pm.variables.get(\"API_URL\");",
									"",
									"pm.sendRequest({",
									"    url: API_URL + '/users/calder',",
									"    method: 'POST',",
									"    header: 'token: password',",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "password",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/calder",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"calder"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_id is too long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var schema = {",
									"  \"message\": {",
									"    \"type\": \"string\"",
									"  }",
									"};",
									"",
									"pm.test(\"Body matches schema\", function () {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Message error message is correct\", function() {",
									"    pm.expect(pm.response.json().message).to.eql(\"user_id is too long (max length 16 characters).\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let API_URL = pm.variables.get(\"API_URL\");",
									"",
									"pm.sendRequest({",
									"    url: API_URL + '/users/calder',",
									"    method: 'POST',",
									"    header: 'token: password',",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "password",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{API_URL}}/users/thisisareallylongusernamethatwillbreakthedatabase",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"users",
								"thisisareallylongusernamethatwillbreakthedatabase"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CREATE user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var schema = {",
							"  \"token\": {",
							"    \"type\": \"string\"",
							"  }",
							"};",
							"",
							"pm.test(\"Body matches schema\", function () {",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let API_URL = pm.variables.get(\"API_URL\");",
							"",
							"",
							"pm.sendRequest({",
							"    url: API_URL + '/users/calder',",
							"    method: 'DELETE',",
							"    header: 'token: password',",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/users/calder",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"users",
						"calder"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let API_URL = pm.variables.get(\"API_URL\");",
							"",
							"pm.sendRequest({",
							"    url: API_URL + '/users/calder',",
							"    method: 'POST',",
							"    header: 'token: password',",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var schema = {",
							"  \"message\": {",
							"    \"type\": \"string\"",
							"  }",
							"};",
							"",
							"pm.test(\"Body matches schema\", function () {",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.json().message).to.include(\"The user [calder] has been deleted.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{API_URL}}/users/calder",
					"host": [
						"{{API_URL}}"
					],
					"path": [
						"users",
						"calder"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "password",
				"type": "string"
			},
			{
				"key": "key",
				"value": "token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}